# -*- coding: utf-8 -*-
"""HealthCare_DiabetesPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DF55El6mrpO_piOddeDSKSCb1rGr3opJ
"""

#Importing Python libraries. Pandas and Numpy
import pandas as pd
import numpy as np

#Using Pandas library to read the Jan-Feb.csv file
df1= pd.read_csv('/content/jan-feb.csv')

#Checking that the data is retrieve or not
df1.head(10)

df1.columns



#Making a variable in which storing the mean of BMI
average_bmi = df['BMI'].mean()
#The BMI values with zero are replacing with the variable
df1.loc[df['BMI'] == 0, 'BMI'] = average_bmi
df1.head(20)

#Rounding of the values of BMI column
df1['BMI'] = df['BMI'].round().astype(int)
df1.head(20)

#Importing the LabelEncoder from SKitlearn Library
from sklearn.preprocessing import LabelEncoder

label_encoder={}
for column in['Blood Group']:
  label_encoder[column]= LabelEncoder()
  df1[column]=label_encoder[column].fit_transform(df1[column])

df1.head()

X = df1.drop(columns=['Names','Outcome'])
Y = df1['Outcome']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test= train_test_split(X,Y,test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, Y_train)

Y_pred = rf_classifier.predict(X_test)

from sklearn.metrics import accuracy_score

accuracy=accuracy_score(Y_test, Y_pred)
print(f"Accuracy: {accuracy}! ")

from sklearn.svm import SVC

svm_classifier = SVC(kernel='linear',random_state=42)
svm_classifier.fit(X_train, Y_train)

svm_pred = svm_classifier.predict(X_test)
svm_accuracy = accuracy_score(Y_test, svm_pred)
print("SVM Accuracy:", svm_accuracy)

from sklearn.linear_model import LogisticRegression

log_reg = LogisticRegression(random_state=42)
log_reg.fit(X_train, Y_train)

log_reg_pred = log_reg.predict(X_test)
log_reg_accuracy= accuracy_score(Y_test, log_reg_pred)
print(f"Accuracy: {log_reg_accuracy}! ")

from sklearn.tree import DecisionTreeClassifier

dt_classifier = DecisionTreeClassifier(random_state=42)
dt_classifier.fit(X_train, Y_train)

dt_pred= dt_classifier.predict(X_test)
dt_accuracy = accuracy_score(Y_test, dt_pred)
print(f"Accuracy: {dt_accuracy}! ")

from sklearn.neighbors import KNeighborsClassifier
knn_classifier = KNeighborsClassifier(n_neighbors=5)
knn_classifier.fit(X_train,Y_train)

Y_prep=knn_classifier.predict(X_test)
knn_accuracy=accuracy_score(Y_test,Y_prep)
print(f"Accuracy: {knn_accuracy}! ")

df2= pd.read_csv('/content/mar-mar.csv')

dummy_df = pd.DataFrame(pd.read_csv('/content/mar-mar.csv'))
dummy_df

chart_df= dummy_df.copy()
chart_df

label_encoders = {}
for column in ['Blood Group']:
    label_encoders[column] = LabelEncoder()
    chart_df[column] = label_encoders[column].fit_transform(chart_df[column])

print("\nPreprocessed Dummy DataFrame:")
chart_df

predictions = rf_classifier.predict(dummy_df.drop(columns=['Names']))

chart_df['Outcome'] = predictions

print("\nDummy DataFrame with Predictions:")
chart_df



#Rounding of the values of BMI column
chart_df['BMI'] = chart_df['BMI'].round().astype(int)
chart_df.head(20)

df1['ID'] = df1.index
df1.head()

chart_df['ID'] = chart_df.index
chart_df.head()

result = pd.concat([df1, chart_df],ignore_index=True)
result.head(1000)

result.shape

# Save the DataFrame to a CSV file
result.to_csv('output.csv', index=False)

# Download the CSV file
from google.colab import files
files.download('output.csv')